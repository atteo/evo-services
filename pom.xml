<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<artifactId>parent</artifactId>
		<groupId>org.atteo</groupId>
		<version>1.10</version>
		<relativePath />
	</parent>
	<groupId>org.atteo.moonshine</groupId>
	<artifactId>parent</artifactId>
	<version>1-SNAPSHOT</version>
	<packaging>pom</packaging>
	<name>Moonshine</name>
	<description>Moonshine provides infrastructure commonly found in application containers.
		But, unlike containers, it is designed to be embedded inside your application.
		It's a modular framework build around Google Guice dependency injection
		with uniform logging using SLF4J, easy unit testing and ready to use support for common JavaEE technologies:
		JDBC, JPA, JMS, JTA, JMX, Java Servlet API, JAX-RS.</description>
	<!-- Javadoc adds /apidocs to this URL when it tries to find Javadocs. Make it happy. -->
	<url>http://atteo.org/static/moonshine</url>
	<developers>
		<developer>
			<id>sentinel</id>
			<name>SÅ‚awek Piotrowski</name>
			<email>sentinel@atteo.com</email>
		</developer>
		<developer>
			<id>tomahawk</id>
			<name>Tomek Piotrowski</name>
			<email>tomek.piotrowski@atteo.com</email>
		</developer>
	</developers>
	<modules>
		<module>archetypes</module>
		<module>bom</module>
		<module>container</module>
		<module>container-test-utils</module>
		<module>services</module>
		<module>reflection-utils</module>
	</modules>
	<scm>
		<connection>https://github.com/atteo/moonshine</connection>
		<url>https://github.com/atteo/moonshine</url>
	</scm>
	<properties>
		<config.version>1.3</config.version>
		<skipMoreTests>true</skipMoreTests>
	</properties>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.atteo.classindex</groupId>
				<artifactId>classindex</artifactId>
				<version>3.1</version>
			</dependency>
			<dependency>
				<groupId>org.atteo.config</groupId>
				<artifactId>config</artifactId>
				<version>${config.version}</version>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-server</artifactId>
				<version>${jetty.version}</version>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-servlet</artifactId>
				<version>${jetty.version}</version>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-servlets</artifactId>
				<version>${jetty.version}</version>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-jmx</artifactId>
				<version>${jetty.version}</version>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-rewrite</artifactId>
				<version>${jetty.version}</version>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>test-jetty-servlet</artifactId>
				<version>${jetty.version}</version>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty.websocket</groupId>
				<artifactId>javax-websocket-server-impl</artifactId>
				<version>${jetty.version}</version>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty.websocket</groupId>
				<artifactId>javax-websocket-client-impl</artifactId>
				<version>${jetty.version}</version>
			</dependency>
			<dependency>
				<groupId>org.hibernate.javax.persistence</groupId>
				<artifactId>hibernate-jpa-2.0-api</artifactId>
				<version>1.0.1.Final</version>
			</dependency>
			<dependency>
				<groupId>org.apache.shiro</groupId>
				<artifactId>shiro-core</artifactId>
				<version>${shiro.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.shiro</groupId>
				<artifactId>shiro-web</artifactId>
				<version>${shiro.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.shiro</groupId>
				<artifactId>shiro-guice</artifactId>
				<version>${shiro.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.tomcat</groupId>
				<artifactId>tomcat-catalina</artifactId>
				<version>${tomcat.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.tomcat</groupId>
				<artifactId>tomcat-coyote</artifactId>
				<version>${tomcat.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.tomcat</groupId>
				<artifactId>tomcat-jasper</artifactId>
				<version>${tomcat.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.tomcat</groupId>
				<artifactId>tomcat-websocket</artifactId>
				<version>${tomcat.version}</version>
			</dependency>
			<dependency>
				<groupId>com.tinkerpop.blueprints</groupId>
				<artifactId>blueprints-core</artifactId>
				<version>${blueprints.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>2.8.1</version>
					<configuration>
						<deployAtEnd>false</deployAtEnd>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<artifactId>maven-enforcer-plugin</artifactId>
				<executions>
					<execution>
						<id>enforce-banned-dependencies</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<bannedDependencies>
									<searchTransitive>true</searchTransitive>
									<excludes>
										<exclude>asm:asm</exclude>
									</excludes>
								</bannedDependencies>
							</rules>
							<fail>true</fail>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<profiles>
		<profile>
			<id>moreTests</id>
			<properties>
				<skipMoreTests>false</skipMoreTests>
			</properties>
		</profile>
		<profile>
			<id>javadocs</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-javadoc-plugin</artifactId>
						<executions>
							<execution>
								<id>default-cli</id>
								<goals>
									<goal>aggregate</goal>
								</goals>
								<configuration>
									<doclet>org.atteo.config.doclet.ConfigDoclet</doclet>
									<docletArtifacts>
										<docletArtifact>
											<groupId>org.atteo.config</groupId>
											<artifactId>config-doclet</artifactId>
											<version>${config.version}</version>
										</docletArtifact>
									</docletArtifacts>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>endorsed</id>
			<activation>
				<property>
					<name>sun.boot.class.path</name>
				</property>
			</activation>
			<build>
				<pluginManagement>
					<plugins>
						<plugin>
							<artifactId>maven-compiler-plugin</artifactId>
							<dependencies>
								<dependency>
									<groupId>javax</groupId>
									<artifactId>javaee-endorsed-api</artifactId>
									<version>6.0</version>
								</dependency>
							</dependencies>
							<configuration>
								<!-- javaee6 contains upgrades of APIs contained within the JDK itself.
								As such these need to be placed on the bootclasspath, rather than classpath of the
								compiler.
								If you don't make use of these new updated API, you can delete the profile.
								On non-SUN jdk, you will need to create a similar profile for your jdk, with the similar property as sun.boot.class.path in Sun's JDK.-->
								<compilerArguments>
									<bootclasspath>${settings.localRepository}/javax/javaee-endorsed-api/6.0/javaee-endorsed-api-6.0.jar${path.separator}${sun.boot.class.path}</bootclasspath>
								</compilerArguments>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>
		<profile>
			<id>jrebel</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.zeroturnaround</groupId>
						<artifactId>jrebel-maven-plugin</artifactId>
						<version>1.1.3</version>
						<executions>
							<execution>
								<id>generate-rebel-xml</id>
								<phase>process-resources</phase>
								<goals>
									<goal>generate</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
